@{
    ViewData["Title"] = "Hisse Senetleri";
}

<div class="container-fluid">
    <div class="row mb-4">
        <div class="col-12">
            <h1 class="display-6 text-primary">
                <i class="fas fa-chart-line me-2"></i>Hisse Senetleri
            </h1>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-md-6">
            <div class="input-group">
                <span class="input-group-text"><i class="fas fa-search"></i></span>
                <input type="text" id="searchInput" class="form-control" placeholder="Sembol, Hisse Adı veya Açıklamada ara..." />
                <button class="btn btn-outline-secondary" type="button" onclick="clearSearch()">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        </div>
        <div class="col-md-3">
            <select id="sortSelect" class="form-select" onchange="sortStocks()">
                <option value="symbol">Sembol (A-Z)</option>
                <option value="symbolDesc">Sembol (Z-A)</option>
                <option value="price">Fiyat (Artan)</option>
                <option value="priceDesc">Fiyat (Azalan)</option>
                <option value="quantity">Lot (Artan)</option>
                <option value="quantityDesc">Lot (Azalan)</option>
                <option value="name">İsim (A-Z)</option>
            </select>
        </div>
        <div class="col-md-3">
            <select id="pageSizeSelect" class="form-select" onchange="changePageSize()">
                <option value="10">10 Hisse</option>
                <option value="25" selected>25 Hisse</option>
                <option value="50">50 Hisse</option>
                <option value="100">100 Hisse</option>
            </select>
        </div>
    </div>

    <div id="loadingSpinner" class="text-center d-none">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Yükleniyor...</span>
        </div>
        <p class="mt-2">Hisse senetleri yükleniyor...</p>
    </div>
    <div class="alert alert-warning d-none" role="alert" id="alertDiv">
    </div>
    <div id="stocksContainer">
        <div class="card">
            <div class="card-header bg-light">
                <div class="row align-items-center">
                    <div class="col">
                        <h5 class="card-title mb-0">
                            <i class="fas fa-table me-2"></i>Hisse Listesi
                        </h5>
                    </div>
                    <div class="col-auto">
                        <span id="tableInfo" class="text-muted">Toplam 0 hisse</span>
                    </div>
                </div>
            </div>
            <div class="card-body p-0">
                <div class="table-responsive">
                    <table class="table table-hover table-striped mb-0">
                        <thead class="table-light">
                            <tr>
                                <th width="120" onclick="changeSort('symbol')" style="cursor: pointer;">
                                    Sembol 
                                    <i class="fas fa-sort ms-1"></i>
                                </th>
                                <th onclick="changeSort('name')" style="cursor: pointer;">
                                    Hisse Adı
                                    <i class="fas fa-sort ms-1"></i>
                                </th>
                                <th width="150" onclick="changeSort('price')" style="cursor: pointer;">
                                    Fiyat (TL)
                                    <i class="fas fa-sort ms-1"></i>
                                </th>
                                <th width="150" onclick="changeSort('quantity')" style="cursor: pointer;">
                                    Toplam Lot
                                    <i class="fas fa-sort ms-1"></i>
                                </th>
                                <th width="180" onclick="changeSort('lastUpdated')" style="cursor: pointer;">
                                    Son Güncelleme
                                    <i class="fas fa-sort ms-1"></i>
                                </th>
                                <th width="120" class="text-center">İşlemler</th>
                            </tr>
                        </thead>
                        <tbody id="stocksTableBody">
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <div class="row mt-4">
        <div class="col-12">
            <nav aria-label="Sayfalama">
                <ul class="pagination justify-content-center" id="pagination">
                </ul>
            </nav>
        </div>
    </div>
</div>

@section Scripts{
    <script>
        let allStocks = [];
        let currentPage = 1;
        let pageSize = 25;
        let currentSort = 'symbol';
        let currentSortDirection = 'asc';
        let currentSearch = '';

        document.addEventListener('DOMContentLoaded', function () {
            loadStocks();
        });

        async function loadStocks() {
            showLoading(true);
            
            try {
                const response = await fetch(`/Stock/GetStocks?page=${currentPage}&pageSize=${pageSize}`);
                if (response.ok) {
                    const data = await response.json();
                    allStocks = data.stocks;
                    
                    if (currentSearch) {
                        filterAndSortStocks();
                    } else {
                        displayStocks(allStocks);
                    }
                    
                    updatePagination(data.totalPages);
                    updateTableInfo(data.totalCount);
                    window.scrollTo({ top: 0, behavior: 'smooth' });
                    
                } else {
                    throw new Error('Veri yüklenemedi');
                }
            } catch (error) {
                showError('Hisse senetleri yüklenirken hata oluştu: ' + error.message);
            } finally {
                showLoading(false);
            }
        }

        function displayStocks(stocks) {
            const tbody = document.getElementById('stocksTableBody');
            
            if (stocks.length === 0) {
                tbody.innerHTML = `
                    <tr>
                        <td colspan="6" class="text-center py-4">
                            <i class="fas fa-search fa-2x text-muted mb-3"></i>
                            <h5 class="text-muted">Hisse senedi bulunamadı</h5>
                            ${currentSearch ? '<p class="text-muted">Arama kriterlerinize uygun hisse bulunamadı.</p>' : ''}
                        </td>
                    </tr>
                `;
                return;
            }

            tbody.innerHTML = stocks.map((stock, index) => `
                <tr>
                    <td>
                        <div class="d-flex align-items-center">
                            <span class="stock-symbol badge bg-primary bg-opacity-10 text-primary fs-6">${stock.symbol}</span>
                        </div>
                    </td>
                    <td>
                        <div>
                            <div class="fw-bold">${stock.name}</div>
                            ${stock.description ? `
                                <small class="text-muted" title="${stock.description}">
                                    ${truncateText(stock.description, 60)}
                                </small>
                            ` : ''}
                        </div>
                    </td>
                    <td>
                        <span class="h5 mb-0 text-success fw-bold">${stock.price.toFixed(2)} TL</span>
                    </td>
                    <td>
                        <div class="d-flex align-items-center">
                            <span class="fw-bold text-primary me-2">${formatNumber(stock.quantity)}</span>
                            <small class="text-muted">lot</small>
                        </div>
                        <div>
                            <small class="text-muted">${formatLotSize(stock.quantity)}</small>
                        </div>
                    </td>
                    <td>
                        <div class="text-muted">
                            <i class="fas fa-clock me-1"></i>
                            ${formatDate(stock.lastUpdated)}
                        </div>
                    </td>
                    <td class="text-center">
                        <div class="btn-group btn-group-sm">
                            <button class="btn btn-outline-primary" title="Detaylar" onclick="showStockDetail('${stock.symbol}')">
                                <i class="fas fa-eye"></i>
                            </button>
                            <button class="btn btn-outline-secondary" title="Fiyat Geçmişi" onclick="showPriceHistory('${stock.symbol}')">
                                <i class="fas fa-chart-bar"></i>
                            </button>
                            <button class="btn btn-outline-info" title="Bilgiler" onclick="showStockInfo('${stock.symbol}')">
                                <i class="fas fa-info-circle"></i>
                            </button>
                            <button class="btn btn-outline-info" title="Satın al" onclick="buyStock('${stock.symbol}')">
                                <i class="fas fa-cart-shopping"></i>
                            </button>
                        </div>
                    </td>
                </tr>
            `).join('');
        }

        function changeSort(sortField) {
            if (currentSort === sortField) {
                currentSortDirection = currentSortDirection === 'asc' ? 'desc' : 'asc';
            } else {
                currentSort = sortField;
                currentSortDirection = 'asc';
            }
            
            document.getElementById('sortSelect').value = currentSortDirection === 'desc' ? sortField + 'Desc' : sortField;
            
            sortStocks();
        }

        function filterAndSortStocks() {
            let filteredStocks = allStocks;

            if (currentSearch) {
                filteredStocks = allStocks.filter(stock => 
                    stock.symbol.toLowerCase().includes(currentSearch) ||
                    stock.name.toLowerCase().includes(currentSearch) ||
                    (stock.description && stock.description.toLowerCase().includes(currentSearch))
                );
            }

            filteredStocks.sort((a, b) => {
                let aValue, bValue;
                
                switch (currentSort) {
                    case 'symbol':
                        aValue = a.symbol;
                        bValue = b.symbol;
                        break;
                    case 'name':
                        aValue = a.name;
                        bValue = b.name;
                        break;
                    case 'price':
                        aValue = a.price;
                        bValue = b.price;
                        break;
                    case 'quantity':
                        aValue = a.quantity;
                        bValue = b.quantity;
                        break;
                    case 'lastUpdated':
                        aValue = new Date(a.lastUpdated);
                        bValue = new Date(b.lastUpdated);
                        break;
                    default:
                        aValue = a.symbol;
                        bValue = b.symbol;
                }

                if (currentSortDirection === 'desc') {
                    return aValue < bValue ? 1 : aValue > bValue ? -1 : 0;
                } else {
                    return aValue > bValue ? 1 : aValue < bValue ? -1 : 0;
                }
            });

            displayStocks(filteredStocks);
            updateTableInfo(filteredStocks.length, true);
        }

        function sortStocks() {
            const sortValue = document.getElementById('sortSelect').value;
            
            if (sortValue.endsWith('Desc')) {
                currentSort = sortValue.replace('Desc', '');
                currentSortDirection = 'desc';
            } else {
                currentSort = sortValue;
                currentSortDirection = 'asc';
            }
            
            filterAndSortStocks();
        }

        document.getElementById('searchInput').addEventListener('input', function(e) {
            currentSearch = e.target.value.toLowerCase();
            filterAndSortStocks();
        });

        function changePageSize() {
            pageSize = parseInt(document.getElementById('pageSizeSelect').value);
            currentPage = 1;
            loadStocks();
        }

        function changePage(page) {
            if (page < 1) return;
            currentPage = page;
            loadStocks();
        }

        function clearSearch() {
            document.getElementById('searchInput').value = '';
            currentSearch = '';
            currentPage = 1;
            loadStocks();
        }

        function updateTableInfo(totalCount, isFiltered = false) {
            const tableInfo = document.getElementById('tableInfo');
            
            if (isFiltered && currentSearch) {
                tableInfo.textContent = `Filtrelenmiş: ${totalCount} hisse`;
            } else {
                tableInfo.textContent = `Toplam: ${totalCount} hisse`;
            }
        }

        // Yardımcı fonksiyonlar
        function showAlert(message,type){
            var alertDiv = document.querySelector("#alertDiv");
            alertDiv.textContent = message;
            alertDiv.className = "alert alert-" + type;
            alertDiv.classList.remove("d-none");
            setTimeout(() => {
                alertDiv.classList.add("d-none");
            }, 5000);
        }

        function truncateText(text, maxLength) {
            if (!text) return '';
            return text.length > maxLength ? text.substring(0, maxLength) + '...' : text;
        }

        function formatNumber(num) {
            return num.toLocaleString('tr-TR');
        }

        function formatLotSize(quantity) {
            if (quantity >= 1000000) {
                return 'Büyük lot';
            } else if (quantity >= 100000) {
                return 'Orta lot';
            } else if (quantity >= 10000) {
                return 'Küçük lot';
            }
            return 'Düşük lot';
        }

        function formatDate(dateString) {
            const date = new Date(dateString);
            return date.toLocaleDateString('tr-TR') + ' ' + date.toLocaleTimeString('tr-TR', { 
                hour: '2-digit', 
                minute: '2-digit' 
            });
        }

        function showLoading(show) {
            document.getElementById('loadingSpinner').classList.toggle('d-none', !show);
            document.getElementById('stocksContainer').classList.toggle('d-none', show);
        }

        function showError(message) {
            const tbody = document.getElementById('stocksTableBody');
            tbody.innerHTML = `
                <tr>
                    <td colspan="6">
                        <div class="alert alert-danger alert-dismissible fade show" role="alert">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            ${message}
                            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                        </div>
                    </td>
                </tr>
            `;
        }

        // İşlem butonları için fonksiyonlar
        function showStockDetail(symbol) {
            alert('Detay göster: ' + symbol);
        }

        function showPriceHistory(symbol) {
            alert('Fiyat geçmişi: ' + symbol);
        }

        function showStockInfo(symbol) {
            alert('Hisse bilgisi: ' + symbol);
        }

        function buyStock(symbol){
            var quantity = prompt('Kaç lot satın almak istiyorsunuz?', '1');
            if(quantity === null) return;
            quantity = parseInt(quantity);
            if(isNaN(quantity) || quantity <= 0){
                alert('Geçersiz lot sayısı.');
                return;
            }
            if(!symbol){
                alert('Geçersiz hisse sembolü.');
                return;
            }
            var buyRequest = {
                Symbol: symbol,
                Quantity: quantity
            };
                fetch('/Stock/Buy', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify( buyRequest)
                }).then(response => {
                    return response.json();
                }).catch(error => {
                    showAlert("Hata oluştu : "+error.message, "danger");
                }).then(data=>{
                    console.log(data);
                    if(data.error){
                        showAlert(data.error,"danger");
                    }
                    if(data.success){
                        showAlert("Hisse alındı!", "success");
                        document.querySelector("#balance").textContent=data.newBalance + " TL";
                        loadStocks();
                    }
                });
            
        }
        
        

        function updatePagination(totalPages) {
            const pagination = document.getElementById('pagination');
            
            if (totalPages <= 1) {
                pagination.innerHTML = '';
                return;
            }

            let paginationHTML = '';

            // Previous butonu
            paginationHTML += `
                <li class="page-item ${currentPage === 1 ? 'disabled' : ''}">
                    <a class="page-link" href="javascript:void(0)" onclick="changePage(${currentPage - 1})">
                        <i class="fas fa-chevron-left"></i> Önceki
                    </a>
                </li>
            `;

            // Sayfa numaraları
            const startPage = Math.max(1, currentPage - 2);
            const endPage = Math.min(totalPages, currentPage + 2);

            // İlk sayfa
            if (startPage > 1) {
                paginationHTML += `
                    <li class="page-item">
                        <a class="page-link" href="javascript:void(0)" onclick="changePage(1)">1</a>
                    </li>
                    ${startPage > 2 ? '<li class="page-item disabled"><span class="page-link">...</span></li>' : ''}
                `;
            }

            // Sayfa numaraları
            for (let i = startPage; i <= endPage; i++) {
                paginationHTML += `
                    <li class="page-item ${i === currentPage ? 'active' : ''}">
                        <a class="page-link" href="javascript:void(0)" onclick="changePage(${i})">${i}</a>
                    </li>
                `;
            }

            // Son sayfa
            if (endPage < totalPages) {
                paginationHTML += `
                    ${endPage < totalPages - 1 ? '<li class="page-item disabled"><span class="page-link">...</span></li>' : ''}
                    <li class="page-item">
                        <a class="page-link" href="javascript:void(0)" onclick="changePage(${totalPages})">${totalPages}</a>
                    </li>
                `;
            }

            // Next butonu
            paginationHTML += `
                <li class="page-item ${currentPage === totalPages ? 'disabled' : ''}">
                    <a class="page-link" href="javascript:void(0)" onclick="changePage(${currentPage + 1})">
                        Sonraki <i class="fas fa-chevron-right"></i>
                    </a>
                </li>
            `;

            pagination.innerHTML = paginationHTML;
        }
    </script>
    }

    <style>
        .stock-symbol {
            font-family: 'Courier New', monospace;
            font-weight: bold;
            padding: 4px 8px;
            border-radius: 4px;
        }
        
        .table th {
            border-top: none;
            font-weight: 600;
            color: #495057;
        }
        
        .table-hover tbody tr:hover {
            background-color: rgba(0, 123, 255, 0.04);
        }
        
        .card {
            border: none;
            box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
        }
        
        .card-header {
            border-bottom: 1px solid #e3e6f0;
        }
    </style>